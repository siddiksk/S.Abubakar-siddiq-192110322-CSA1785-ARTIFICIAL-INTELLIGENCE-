from collections import deque

def missionaries_cannibals(missionaries, cannibals, boat_size):
    # Initialize starting state
    start = (missionaries, cannibals, 0, 0)
    # Initialize a stack for DFS
    stack = [start]
    # Create a set to keep track of visited states
    visited = {start}
    # Loop until the stack is empty
    while stack:
        # Get the next state from the stack
        state = stack.pop()
        # Check if the target state has been reached
        if state[0] == 0 and state[1] == 0:
            return state
        # Generate new states and add them to the stack
        for new_state in get_next_states(state, boat_size):
            if new_state not in visited:
                visited.add(new_state)
                stack.append(new_state)
    # If the target state was not reached, return failure
    return None

def get_next_states(state, boat_size):
    states = []
    m, c, bm, bc = state
    if bm == 1:
        # Boat is on the other side, moving to this side
        for i in range(0, boat_size+1):
            for j in range(0, boat_size+1-i):
                if i+j == 0:
                    continue
                if i+j > bm:
                    continue
                if m-i < 0 or c-j < 0:
                    continue
                if (m-i) >= (c-j) or (m-i) == 0:
                    states.append((m-i, c-j, 0, bc+j))
    else:
        # Boat is on this side, moving to the other side
        for i in range(0, boat_size+1):
            for j in range(0, boat_size+1-i):
                if i+j == 0:
                    continue
                if i+j > bm:
                    continue
                if m+i > 3 or c+j > 3:
                    continue
                if (m+i) >= (c+j) or (m+i) == 0:
                    states.append((m+i, c+j, 1, bc+j))
    return states

# Test the function
print(missionaries_cannibals(3, 3, 2))
